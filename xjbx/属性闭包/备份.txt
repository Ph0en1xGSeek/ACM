#include <iostream>
#include <stdio.h>
#include <string.h>
#include <string>
#include <stdlib.h>

using namespace std;

int father[30];///1~26

int getFather(int n)
{
    if(father[n] == n)
        return n;
    father[n] = getFather(father[n]);
    return father[n];
}

void unions(int a, int b)
{
    int fa = getFather(a);
    int fb = getFather(b);
    if(fa != fb)
        father[fa] = fb;
}


int main()
{
    for(int i = 0; i < 30; i++)
        father[i] = i;
    bool added[100];
    memset(added, false, sizeof(added));
    string from[100], to[100];
    bool flag;
    string who;
    int num;
    printf("条件个数：\n");
    scanf("%d", &num);
    printf("输入条件\n");
    for(int i = 0; i < num; i++)
    {
        cin >> from[i];
        cin >> to[i];
    }
    printf("谁的\n");
    cin >> who;
    
    for(int k = 0; k < who.length(); k++)
    {
        int w = who[k] - 'A' +1;
        while(flag)
        {
            flag = false;
            for(int i = 0; i < num; i++)
            {
                if(added[i])    continue;
                for(int j = 0; j < from[i].length(); j++)
                {
                    int tmp = from[i][j] - 'A' + 1;
                    if(getFather(tmp) != getFather(w))
                        goto next;
                }
                flag = true;
                added[i] = true;
                for(int j = 0; j < to[i].length(); j++)
                {
                    int tmp = to[i][j] - 'A' + 1;
                    unions(tmp, w);
                }
                next:;
            }
        }
    }
    
    printf("属性闭包\n");
    for(int i = 1; i < 27; i++)
        if(father[i] == w)
            printf("%c", i - 1 + 'A');
    printf("\n");
    system("PAUSE");
    return 0;
}
